name: Docker

on:
  push:
    branches: [ "main" ]
    tags: [ "v*.*.*" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}   # may contain uppercase

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Normalize image name to lowercase
        id: repo
        run: |
          echo "name=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Install cosign (non-PR)
        if: github.event_name != 'pull_request'
        run: |
          set -euo pipefail
          COSIGN_VERSION="v2.2.4"
          ARCH=$(uname -m)
          case "$ARCH" in
            x86_64) COSIGN_ARCH=amd64 ;;
            aarch64) COSIGN_ARCH=arm64 ;;
            *) echo "Unsupported arch: $ARCH"; exit 1 ;;
          esac
          curl -fsSL "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-${COSIGN_ARCH}" -o /usr/local/bin/cosign
          chmod +x /usr/local/bin/cosign
          cosign version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute next tag
        id: version
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags
          latest=$(git tag -l "v*.*.*" --sort=-v:refname | head -n1)
          if [[ -z "${latest}" ]]; then
            next="v1.0.0"
          else
            IFS='.' read -r v M m <<<"${latest#v}"
            m=$((m+1))
            next="v${v}.${M}.${m}"
          fi
          echo "next=${next}" >> "$GITHUB_OUTPUT"

      - name: Build image for tests (loaded locally)
        run: |
          echo "Building Docker image for testing..."
          for i in {1..3}; do
            if docker buildx build \
                --load \
                -t $REGISTRY/${{ steps.repo.outputs.name }}:ci-test \
                .; then
              echo "Docker build completed successfully"
              break
            fi
            if [ $i -eq 3 ]; then
              echo "ERROR: All Docker build attempts failed"
              exit 1
            fi
            echo "Retrying in 30 seconds..."
            sleep 30
          done

      # NEW: push the ci-test tag so other jobs (debug) can pull it
      - name: Push :ci-test image
        if: github.event_name != 'pull_request'
        run: |
          docker push $REGISTRY/${{ steps.repo.outputs.name }}:ci-test

      - name: Run hardening + smoke + STIG scan (root for this step only)
        shell: bash
        run: |
          set -euo pipefail
          IMG="$REGISTRY/${{ steps.repo.outputs.name }}:ci-test"

          # Ensure image default user is non-root (CIS 5.4)
          DEF_USER="$(docker inspect --format '{{.Config.User}}' "$IMG" || true)"
          if [[ ! "$DEF_USER" =~ ^[0-9]+:[0-9]+$ ]]; then
            echo "::error ::Image default user is not non-root (uid:gid). Got: '$DEF_USER'"
            exit 1
          fi
          echo "Default image user: $DEF_USER"

          sudo aa-status >/dev/null 2>&1 || echo "::warning ::AppArmor not available on host"

          try_run() {
            local name="$1"; shift
            docker run -d --name "$name" \
              --entrypoint "$ENTRY" \
              --user 0:0 \
              $EXTRA_FLAGS \
              "$IMG" -lc 'sleep infinity'
          }

          # Try bash first, then sh; read-only first, then RW fallback
          for ENTRY in /bin/bash /bin/sh; do
            for mode in ro rw; do
              NAME="hardn-test-$ENTRY-$mode-$$"
              if [[ "$mode" == "ro" ]]; then
                EXTRA_FLAGS="--read-only \
                             --tmpfs /tmp:rw,noexec,nosuid,mode=1777,size=64m \
                             --tmpfs /run:rw,noexec,nosuid,mode=0755,size=16m \
                             --tmpfs /home/hardn:rw,mode=0755,size=32m \
                             --tmpfs /opt/hardn-xdr:rw,mode=0755,size=64m"
              else
                EXTRA_FLAGS=""
              fi

              CID="$(try_run "$NAME" || true)"
              [[ -n "${CID:-}" ]] || continue

              ok=0
              for i in {1..20}; do
                if docker exec "$NAME" true 2>/dev/null; then ok=1; break; fi
                if ! docker ps --format '{{.Names}}' | grep -qx "$NAME"; then
                  echo "::error ::Container died during startup ($ENTRY/$mode)"
                  docker inspect "$NAME" --format \
                    'Status={{.State.Status}} ExitCode={{.State.ExitCode}} Error={{.State.Error}}' || true
                  docker logs "$NAME" || true
                  docker rm -f "$NAME" >/dev/null 2>&1 || true
                  ok=0
                  break
                fi
                sleep 1
              done

              if [[ $ok -eq 1 ]]; then
                echo "[*] Smoke test"
                docker exec "$NAME" "$ENTRY" -lc '/usr/local/bin/smoke_test.sh'

                echo "[*] STIG scan"
                CONTENT="$(docker exec "$NAME" "$ENTRY" -lc 'ls /usr/share/xml/scap/ssg/content/ssg-debian*-ds.xml 2>/dev/null | sort -V | tail -n1 || true')"
                if [[ -n "$CONTENT" ]] && docker exec "$NAME" "$ENTRY" -lc 'command -v oscap >/dev/null'; then
                  docker exec "$NAME" "$ENTRY" -lc \
                    "oscap xccdf eval \
                       --profile xccdf_org.ssgproject.content_profile_stig \
                       --report /tmp/stig_report.html \
                       --results /tmp/stig_results.xml \
                       \"$CONTENT\" || echo 'STIG scan warnings'"
                else
                  docker exec "$NAME" "$ENTRY" -lc 'echo "<html><body><h1>STIG Scan Not Available</h1></body></html>" > /tmp/stig_report.html'
                  docker exec "$NAME" "$ENTRY" -lc 'echo "<?xml version=\"1.0\"?><results><title>STIG Scan Not Available</title></results>" > /tmp/stig_results.xml'
                fi

                mkdir -p artifacts
                docker cp "$NAME":/tmp/stig_report.html artifacts/stig_report.html || true
                docker cp "$NAME":/tmp/stig_results.xml artifacts/stig_results.xml || true
                docker rm -f "$NAME" >/dev/null
                exit 0
              fi
            done
          done

          echo "::error ::All startup strategies failed"
          exit 1

      - name: Upload STIG artifacts
        uses: actions/upload-artifact@v4
        with:
          name: stig-scan
          path: artifacts/*

      - name: Extract Docker metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}
          tags: |
            type=raw,value=deb13
            type=raw,value=${{ steps.version.outputs.next }}
            type=sha

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image (cosign keyless)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Generate SBOM (Syft)
        id: sbom
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}@${{ steps.build-and-push.outputs.digest }}
          format: spdx-json
          artifact-name: sbom-spdx
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-spdx
          path: sbom.spdx.json

      - name: Create git tag
        if: github.ref == 'refs/heads/main'
        run: |
          git tag ${{ steps.version.outputs.next }}
          git push origin ${{ steps.version.outputs.next }}

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.next }}
          generate_release_notes: true
          files: |
            artifacts/stig_report.html
            artifacts/stig_results.xml
            sbom.spdx.json

  # Always-run debug job (executes even if the build job fails earlier)
  debug-container:
    if: always()
    runs-on: ubuntu-latest
    needs: [build-test-push]
    steps:
      - name: Pull and start container in debug mode
        run: |
          set -e
          IMG="${{ env.REGISTRY }}/${{ github.repository }}:ci-test"
          echo "Pulling $IMG ..."
          docker pull "$IMG"

          # Bypass entrypoint; keep container alive
          docker run -d --name debug-container \
            --entrypoint /bin/sh \
            "$IMG" -c "sleep infinity"

          # Collect diagnostics
          sleep 3
          docker ps -a || true
          docker inspect debug-container > debug-inspect.json || true
          docker logs debug-container > debug-logs.txt || true

          # Quick environment snapshot inside
          docker exec debug-container /bin/sh -lc 'id; whoami; uname -a; cat /etc/os-release || true' > debug-inside.txt || true
          docker exec debug-container /bin/sh -lc 'ls -l /usr/local/bin || true' >> debug-inside.txt || true

          mkdir -p debug
          mv debug-*.json debug-*.txt debug/ || true

      - name: Upload debug bundle
        uses: actions/upload-artifact@v4
        with:
          name: container-debug
          path: debug/*